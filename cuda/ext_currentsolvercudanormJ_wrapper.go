package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
)

// CUDA handle for NormMaskJ kernel
var NormMaskJ_code cu.Function

// Stores the arguments for NormMaskJ kernel invocation
type NormMaskJ_args_t struct{
	 arg_jmaskx unsafe.Pointer
	 arg_jmasky unsafe.Pointer
	 arg_jmaskz unsafe.Pointer
	 arg_normJ float32
	 arg_Nx int
	 arg_Ny int
	 arg_Nz int
	 argptr [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for NormMaskJ kernel invocation
var NormMaskJ_args NormMaskJ_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 NormMaskJ_args.argptr[0] = unsafe.Pointer(&NormMaskJ_args.arg_jmaskx)
	 NormMaskJ_args.argptr[1] = unsafe.Pointer(&NormMaskJ_args.arg_jmasky)
	 NormMaskJ_args.argptr[2] = unsafe.Pointer(&NormMaskJ_args.arg_jmaskz)
	 NormMaskJ_args.argptr[3] = unsafe.Pointer(&NormMaskJ_args.arg_normJ)
	 NormMaskJ_args.argptr[4] = unsafe.Pointer(&NormMaskJ_args.arg_Nx)
	 NormMaskJ_args.argptr[5] = unsafe.Pointer(&NormMaskJ_args.arg_Ny)
	 NormMaskJ_args.argptr[6] = unsafe.Pointer(&NormMaskJ_args.arg_Nz)
	 }

// Wrapper for NormMaskJ CUDA kernel, asynchronous.
func k_NormMaskJ_async ( jmaskx unsafe.Pointer, jmasky unsafe.Pointer, jmaskz unsafe.Pointer, normJ float32, Nx int, Ny int, Nz int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
		timer.Start("NormMaskJ")
	}

	NormMaskJ_args.Lock()
	defer NormMaskJ_args.Unlock()

	if NormMaskJ_code == 0{
		NormMaskJ_code = fatbinLoad(NormMaskJ_map, "NormMaskJ")
	}

	 NormMaskJ_args.arg_jmaskx = jmaskx
	 NormMaskJ_args.arg_jmasky = jmasky
	 NormMaskJ_args.arg_jmaskz = jmaskz
	 NormMaskJ_args.arg_normJ = normJ
	 NormMaskJ_args.arg_Nx = Nx
	 NormMaskJ_args.arg_Ny = Ny
	 NormMaskJ_args.arg_Nz = Nz
	

	args := NormMaskJ_args.argptr[:]
	cu.LaunchKernel(NormMaskJ_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
		timer.Stop("NormMaskJ")
	}
}

// maps compute capability on PTX code for NormMaskJ kernel.
var NormMaskJ_map = map[int]string{ 0: "" ,
20: NormMaskJ_ptx_20 ,
30: NormMaskJ_ptx_30 ,
35: NormMaskJ_ptx_35 ,
50: NormMaskJ_ptx_50 ,
52: NormMaskJ_ptx_52 ,
53: NormMaskJ_ptx_53  }

// NormMaskJ PTX code for various compute capabilities.
const(
  NormMaskJ_ptx_20 = `
.version 4.3
.target sm_20
.address_size 64

	// .globl	NormMaskJ

.visible .entry NormMaskJ(
	.param .u64 NormMaskJ_param_0,
	.param .u64 NormMaskJ_param_1,
	.param .u64 NormMaskJ_param_2,
	.param .f32 NormMaskJ_param_3,
	.param .u32 NormMaskJ_param_4,
	.param .u32 NormMaskJ_param_5,
	.param .u32 NormMaskJ_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [NormMaskJ_param_0];
	ld.param.u64 	%rd2, [NormMaskJ_param_1];
	ld.param.u64 	%rd3, [NormMaskJ_param_2];
	ld.param.f32 	%f1, [NormMaskJ_param_3];
	ld.param.u32 	%r4, [NormMaskJ_param_4];
	ld.param.u32 	%r5, [NormMaskJ_param_5];
	ld.param.u32 	%r6, [NormMaskJ_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	setp.ge.s32	%p1, %r2, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd4, %rd5;
	sqrt.rn.f32 	%f2, %f1;
	ld.global.f32 	%f3, [%rd6];
	div.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd6], %f4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.rn.f32 	%f6, %f5, %f2;
	st.global.f32 	[%rd8], %f6;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f7, [%rd10];
	div.rn.f32 	%f8, %f7, %f2;
	st.global.f32 	[%rd10], %f8;

BB0_2:
	ret;
}


`
   NormMaskJ_ptx_30 = `
.version 4.3
.target sm_30
.address_size 64

	// .globl	NormMaskJ

.visible .entry NormMaskJ(
	.param .u64 NormMaskJ_param_0,
	.param .u64 NormMaskJ_param_1,
	.param .u64 NormMaskJ_param_2,
	.param .f32 NormMaskJ_param_3,
	.param .u32 NormMaskJ_param_4,
	.param .u32 NormMaskJ_param_5,
	.param .u32 NormMaskJ_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [NormMaskJ_param_0];
	ld.param.u64 	%rd2, [NormMaskJ_param_1];
	ld.param.u64 	%rd3, [NormMaskJ_param_2];
	ld.param.f32 	%f1, [NormMaskJ_param_3];
	ld.param.u32 	%r4, [NormMaskJ_param_4];
	ld.param.u32 	%r5, [NormMaskJ_param_5];
	ld.param.u32 	%r6, [NormMaskJ_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	setp.ge.s32	%p1, %r2, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd4, %rd5;
	sqrt.rn.f32 	%f2, %f1;
	ld.global.f32 	%f3, [%rd6];
	div.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd6], %f4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.rn.f32 	%f6, %f5, %f2;
	st.global.f32 	[%rd8], %f6;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f7, [%rd10];
	div.rn.f32 	%f8, %f7, %f2;
	st.global.f32 	[%rd10], %f8;

BB0_2:
	ret;
}


`
   NormMaskJ_ptx_35 = `
.version 4.3
.target sm_35
.address_size 64

	// .weak	cudaMalloc

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	NormMaskJ
.visible .entry NormMaskJ(
	.param .u64 NormMaskJ_param_0,
	.param .u64 NormMaskJ_param_1,
	.param .u64 NormMaskJ_param_2,
	.param .f32 NormMaskJ_param_3,
	.param .u32 NormMaskJ_param_4,
	.param .u32 NormMaskJ_param_5,
	.param .u32 NormMaskJ_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [NormMaskJ_param_0];
	ld.param.u64 	%rd2, [NormMaskJ_param_1];
	ld.param.u64 	%rd3, [NormMaskJ_param_2];
	ld.param.f32 	%f1, [NormMaskJ_param_3];
	ld.param.u32 	%r4, [NormMaskJ_param_4];
	ld.param.u32 	%r5, [NormMaskJ_param_5];
	ld.param.u32 	%r6, [NormMaskJ_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	setp.ge.s32	%p1, %r2, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB6_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd4, %rd5;
	sqrt.rn.f32 	%f2, %f1;
	ld.global.f32 	%f3, [%rd6];
	div.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd6], %f4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.rn.f32 	%f6, %f5, %f2;
	st.global.f32 	[%rd8], %f6;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f7, [%rd10];
	div.rn.f32 	%f8, %f7, %f2;
	st.global.f32 	[%rd10], %f8;

BB6_2:
	ret;
}


`
   NormMaskJ_ptx_50 = `
.version 4.3
.target sm_50
.address_size 64

	// .weak	cudaMalloc

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	NormMaskJ
.visible .entry NormMaskJ(
	.param .u64 NormMaskJ_param_0,
	.param .u64 NormMaskJ_param_1,
	.param .u64 NormMaskJ_param_2,
	.param .f32 NormMaskJ_param_3,
	.param .u32 NormMaskJ_param_4,
	.param .u32 NormMaskJ_param_5,
	.param .u32 NormMaskJ_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [NormMaskJ_param_0];
	ld.param.u64 	%rd2, [NormMaskJ_param_1];
	ld.param.u64 	%rd3, [NormMaskJ_param_2];
	ld.param.f32 	%f1, [NormMaskJ_param_3];
	ld.param.u32 	%r4, [NormMaskJ_param_4];
	ld.param.u32 	%r5, [NormMaskJ_param_5];
	ld.param.u32 	%r6, [NormMaskJ_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	setp.ge.s32	%p1, %r2, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB6_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd4, %rd5;
	sqrt.rn.f32 	%f2, %f1;
	ld.global.f32 	%f3, [%rd6];
	div.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd6], %f4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.rn.f32 	%f6, %f5, %f2;
	st.global.f32 	[%rd8], %f6;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f7, [%rd10];
	div.rn.f32 	%f8, %f7, %f2;
	st.global.f32 	[%rd10], %f8;

BB6_2:
	ret;
}


`
   NormMaskJ_ptx_52 = `
.version 4.3
.target sm_52
.address_size 64

	// .weak	cudaMalloc

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	NormMaskJ
.visible .entry NormMaskJ(
	.param .u64 NormMaskJ_param_0,
	.param .u64 NormMaskJ_param_1,
	.param .u64 NormMaskJ_param_2,
	.param .f32 NormMaskJ_param_3,
	.param .u32 NormMaskJ_param_4,
	.param .u32 NormMaskJ_param_5,
	.param .u32 NormMaskJ_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [NormMaskJ_param_0];
	ld.param.u64 	%rd2, [NormMaskJ_param_1];
	ld.param.u64 	%rd3, [NormMaskJ_param_2];
	ld.param.f32 	%f1, [NormMaskJ_param_3];
	ld.param.u32 	%r4, [NormMaskJ_param_4];
	ld.param.u32 	%r5, [NormMaskJ_param_5];
	ld.param.u32 	%r6, [NormMaskJ_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	setp.ge.s32	%p1, %r2, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB6_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd4, %rd5;
	sqrt.rn.f32 	%f2, %f1;
	ld.global.f32 	%f3, [%rd6];
	div.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd6], %f4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.rn.f32 	%f6, %f5, %f2;
	st.global.f32 	[%rd8], %f6;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f7, [%rd10];
	div.rn.f32 	%f8, %f7, %f2;
	st.global.f32 	[%rd10], %f8;

BB6_2:
	ret;
}


`
   NormMaskJ_ptx_53 = `
.version 4.3
.target sm_53
.address_size 64

	// .weak	cudaMalloc

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	NormMaskJ
.visible .entry NormMaskJ(
	.param .u64 NormMaskJ_param_0,
	.param .u64 NormMaskJ_param_1,
	.param .u64 NormMaskJ_param_2,
	.param .f32 NormMaskJ_param_3,
	.param .u32 NormMaskJ_param_4,
	.param .u32 NormMaskJ_param_5,
	.param .u32 NormMaskJ_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [NormMaskJ_param_0];
	ld.param.u64 	%rd2, [NormMaskJ_param_1];
	ld.param.u64 	%rd3, [NormMaskJ_param_2];
	ld.param.f32 	%f1, [NormMaskJ_param_3];
	ld.param.u32 	%r4, [NormMaskJ_param_4];
	ld.param.u32 	%r5, [NormMaskJ_param_5];
	ld.param.u32 	%r6, [NormMaskJ_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	setp.ge.s32	%p1, %r2, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB6_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd4, %rd5;
	sqrt.rn.f32 	%f2, %f1;
	ld.global.f32 	%f3, [%rd6];
	div.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd6], %f4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f5, [%rd8];
	div.rn.f32 	%f6, %f5, %f2;
	st.global.f32 	[%rd8], %f6;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	ld.global.f32 	%f7, [%rd10];
	div.rn.f32 	%f8, %f7, %f2;
	st.global.f32 	[%rd10], %f8;

BB6_2:
	ret;
}


`
 )
